To start React Project type in any command prom /bash /etc

npx create-react-app [NameOfTheProject] --template typescript  <- for TypeScript



Install Node.js and npm:

Download and install Node.js from Node.js official website.
Verify the installation by running the following commands in your terminal:
bash
Copy code
node -v
npm -v
Create a React Application:

The easiest way to set up a new React project is by using the Create React App tool.
Run the following command to create a new React application:
bash
Copy code
npx create-react-app my-app
Replace my-app with your desired project name.
Navigate to Your Project Directory:

Change directory to your new project folder:
bash
Copy code
cd my-app
Start the Development Server:

Once inside your project directory, start the development server:
bash
Copy code
npm start
This command will start the development server and open your new React application in the default web browser.
Edit and Develop:

Open your project in your chosen text editor or IDE.
You can start editing the src/App.js file to see changes live in the browser.
Additional Tools and Libraries:
React Developer Tools: Browser extensions for Chrome and Firefox to help with debugging React applications.
Redux: For state management in larger applications.
React Router: For handling navigation within the application.



Getting Started with Create React App
This project was bootstrapped with Create React App.

Available Scripts
In the project directory, you can run:

npm start
Runs the app in the development mode.
Open http://localhost:3000 to view it in the browser.

The page will reload if you make edits.
You will also see any lint errors in the console.

npm test
Launches the test runner in the interactive watch mode.
See the section about running tests for more information.

npm run build
Builds the app for production to the build folder.
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.
Your app is ready to be deployed!

See the section about deployment for more information.

npm run eject
Note: this is a one-way operation. Once you eject, you can’t go back!

If you aren’t satisfied with the build tool and configuration choices, you can eject at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except eject will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use eject. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

Learn More
You can learn more in the Create React App documentation.

To learn React, check out the React documentation.
